/*
 * Copyright (c) 2016 Patrick P. Frey
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
/// \brief Generated map of identifiers for trace viewer
/// \file traceViewer_gen.cpp

//
// THIS FILE IS GENERATED: DO NOT MODIFY !!!
// 
#include "traceViewer.hpp"
#include "objectIds_gen.hpp"

using namespace strus;

void TraceViewer::fillMaps()
{

	m_classnamemap["AggregatorFunctionInstance"] = ClassId_AggregatorFunctionInstance;
	m_classnamear.push_back( "AggregatorFunctionInstance");
	m_classnamemap["AggregatorFunction"] = ClassId_AggregatorFunction;
	m_classnamear.push_back( "AggregatorFunction");
	m_classnamemap["AnalyzerObjectBuilder"] = ClassId_AnalyzerObjectBuilder;
	m_classnamear.push_back( "AnalyzerObjectBuilder");
	m_classnamemap["AttributeReader"] = ClassId_AttributeReader;
	m_classnamear.push_back( "AttributeReader");
	m_classnamemap["DatabaseBackupCursor"] = ClassId_DatabaseBackupCursor;
	m_classnamear.push_back( "DatabaseBackupCursor");
	m_classnamemap["DatabaseClient"] = ClassId_DatabaseClient;
	m_classnamear.push_back( "DatabaseClient");
	m_classnamemap["DatabaseCursor"] = ClassId_DatabaseCursor;
	m_classnamear.push_back( "DatabaseCursor");
	m_classnamemap["Database"] = ClassId_Database;
	m_classnamear.push_back( "Database");
	m_classnamemap["DatabaseTransaction"] = ClassId_DatabaseTransaction;
	m_classnamear.push_back( "DatabaseTransaction");
	m_classnamemap["DocumentAnalyzerContext"] = ClassId_DocumentAnalyzerContext;
	m_classnamear.push_back( "DocumentAnalyzerContext");
	m_classnamemap["DocumentAnalyzer"] = ClassId_DocumentAnalyzer;
	m_classnamear.push_back( "DocumentAnalyzer");
	m_classnamemap["DocumentClassDetector"] = ClassId_DocumentClassDetector;
	m_classnamear.push_back( "DocumentClassDetector");
	m_classnamemap["DocumentTermIterator"] = ClassId_DocumentTermIterator;
	m_classnamear.push_back( "DocumentTermIterator");
	m_classnamemap["ForwardIterator"] = ClassId_ForwardIterator;
	m_classnamear.push_back( "ForwardIterator");
	m_classnamemap["InvAclIterator"] = ClassId_InvAclIterator;
	m_classnamear.push_back( "InvAclIterator");
	m_classnamemap["MetaDataReader"] = ClassId_MetaDataReader;
	m_classnamear.push_back( "MetaDataReader");
	m_classnamemap["MetaDataRestrictionInstance"] = ClassId_MetaDataRestrictionInstance;
	m_classnamear.push_back( "MetaDataRestrictionInstance");
	m_classnamemap["MetaDataRestriction"] = ClassId_MetaDataRestriction;
	m_classnamear.push_back( "MetaDataRestriction");
	m_classnamemap["NormalizerFunctionContext"] = ClassId_NormalizerFunctionContext;
	m_classnamear.push_back( "NormalizerFunctionContext");
	m_classnamemap["NormalizerFunctionInstance"] = ClassId_NormalizerFunctionInstance;
	m_classnamear.push_back( "NormalizerFunctionInstance");
	m_classnamemap["NormalizerFunction"] = ClassId_NormalizerFunction;
	m_classnamear.push_back( "NormalizerFunction");
	m_classnamemap["PostingIterator"] = ClassId_PostingIterator;
	m_classnamear.push_back( "PostingIterator");
	m_classnamemap["PostingJoinOperator"] = ClassId_PostingJoinOperator;
	m_classnamear.push_back( "PostingJoinOperator");
	m_classnamemap["QueryAnalyzer"] = ClassId_QueryAnalyzer;
	m_classnamear.push_back( "QueryAnalyzer");
	m_classnamemap["QueryEval"] = ClassId_QueryEval;
	m_classnamear.push_back( "QueryEval");
	m_classnamemap["Query"] = ClassId_Query;
	m_classnamear.push_back( "Query");
	m_classnamemap["QueryProcessor"] = ClassId_QueryProcessor;
	m_classnamear.push_back( "QueryProcessor");
	m_classnamemap["ScalarFunctionInstance"] = ClassId_ScalarFunctionInstance;
	m_classnamear.push_back( "ScalarFunctionInstance");
	m_classnamemap["ScalarFunction"] = ClassId_ScalarFunction;
	m_classnamear.push_back( "ScalarFunction");
	m_classnamemap["ScalarFunctionParser"] = ClassId_ScalarFunctionParser;
	m_classnamear.push_back( "ScalarFunctionParser");
	m_classnamemap["SegmenterContext"] = ClassId_SegmenterContext;
	m_classnamear.push_back( "SegmenterContext");
	m_classnamemap["SegmenterInstance"] = ClassId_SegmenterInstance;
	m_classnamear.push_back( "SegmenterInstance");
	m_classnamemap["Segmenter"] = ClassId_Segmenter;
	m_classnamear.push_back( "Segmenter");
	m_classnamemap["StatisticsBuilder"] = ClassId_StatisticsBuilder;
	m_classnamear.push_back( "StatisticsBuilder");
	m_classnamemap["StatisticsIterator"] = ClassId_StatisticsIterator;
	m_classnamear.push_back( "StatisticsIterator");
	m_classnamemap["StatisticsProcessor"] = ClassId_StatisticsProcessor;
	m_classnamear.push_back( "StatisticsProcessor");
	m_classnamemap["StatisticsViewer"] = ClassId_StatisticsViewer;
	m_classnamear.push_back( "StatisticsViewer");
	m_classnamemap["StorageAlterMetaDataTable"] = ClassId_StorageAlterMetaDataTable;
	m_classnamear.push_back( "StorageAlterMetaDataTable");
	m_classnamemap["StorageClient"] = ClassId_StorageClient;
	m_classnamear.push_back( "StorageClient");
	m_classnamemap["StorageDocument"] = ClassId_StorageDocument;
	m_classnamear.push_back( "StorageDocument");
	m_classnamemap["StorageDocumentUpdate"] = ClassId_StorageDocumentUpdate;
	m_classnamear.push_back( "StorageDocumentUpdate");
	m_classnamemap["StorageDump"] = ClassId_StorageDump;
	m_classnamear.push_back( "StorageDump");
	m_classnamemap["Storage"] = ClassId_Storage;
	m_classnamear.push_back( "Storage");
	m_classnamemap["StorageObjectBuilder"] = ClassId_StorageObjectBuilder;
	m_classnamear.push_back( "StorageObjectBuilder");
	m_classnamemap["StorageTransaction"] = ClassId_StorageTransaction;
	m_classnamear.push_back( "StorageTransaction");
	m_classnamemap["SummarizerFunctionContext"] = ClassId_SummarizerFunctionContext;
	m_classnamear.push_back( "SummarizerFunctionContext");
	m_classnamemap["SummarizerFunctionInstance"] = ClassId_SummarizerFunctionInstance;
	m_classnamear.push_back( "SummarizerFunctionInstance");
	m_classnamemap["SummarizerFunction"] = ClassId_SummarizerFunction;
	m_classnamear.push_back( "SummarizerFunction");
	m_classnamemap["TextProcessor"] = ClassId_TextProcessor;
	m_classnamear.push_back( "TextProcessor");
	m_classnamemap["TokenizerFunctionContext"] = ClassId_TokenizerFunctionContext;
	m_classnamear.push_back( "TokenizerFunctionContext");
	m_classnamemap["TokenizerFunctionInstance"] = ClassId_TokenizerFunctionInstance;
	m_classnamear.push_back( "TokenizerFunctionInstance");
	m_classnamemap["TokenizerFunction"] = ClassId_TokenizerFunction;
	m_classnamear.push_back( "TokenizerFunction");
	m_classnamemap["ValueIterator"] = ClassId_ValueIterator;
	m_classnamear.push_back( "ValueIterator");
	m_classnamemap["WeightingFunctionContext"] = ClassId_WeightingFunctionContext;
	m_classnamear.push_back( "WeightingFunctionContext");
	m_classnamemap["WeightingFunctionInstance"] = ClassId_WeightingFunctionInstance;
	m_classnamear.push_back( "WeightingFunctionInstance");
	m_classnamemap["WeightingFunction"] = ClassId_WeightingFunction;
	m_classnamear.push_back( "WeightingFunction");
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunctionInstance, "Destructor")] = ClassId_AggregatorFunctionInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunctionInstance, ClassId_AggregatorFunctionInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunctionInstance, "evaluate")] = ClassId_AggregatorFunctionInstance::Method_evaluate;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunctionInstance, ClassId_AggregatorFunctionInstance::Method_evaluate)] = "evaluate";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunction, "Destructor")] = ClassId_AggregatorFunction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunction, ClassId_AggregatorFunction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunction, "createInstance")] = ClassId_AggregatorFunction::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunction, ClassId_AggregatorFunction::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunction, "getDescription")] = ClassId_AggregatorFunction::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunction, ClassId_AggregatorFunction::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "Destructor")] = ClassId_AnalyzerObjectBuilder::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, ClassId_AnalyzerObjectBuilder::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "getTextProcessor")] = ClassId_AnalyzerObjectBuilder::Method_getTextProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, ClassId_AnalyzerObjectBuilder::Method_getTextProcessor)] = "getTextProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "createSegmenter")] = ClassId_AnalyzerObjectBuilder::Method_createSegmenter;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, ClassId_AnalyzerObjectBuilder::Method_createSegmenter)] = "createSegmenter";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "createDocumentAnalyzer")] = ClassId_AnalyzerObjectBuilder::Method_createDocumentAnalyzer;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, ClassId_AnalyzerObjectBuilder::Method_createDocumentAnalyzer)] = "createDocumentAnalyzer";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "createQueryAnalyzer")] = ClassId_AnalyzerObjectBuilder::Method_createQueryAnalyzer;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, ClassId_AnalyzerObjectBuilder::Method_createQueryAnalyzer)] = "createQueryAnalyzer";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "Destructor")] = ClassId_AttributeReader::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, ClassId_AttributeReader::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "elementHandle")] = ClassId_AttributeReader::Method_elementHandle;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, ClassId_AttributeReader::Method_elementHandle)] = "elementHandle";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "skipDoc")] = ClassId_AttributeReader::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, ClassId_AttributeReader::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "getValue")] = ClassId_AttributeReader::Method_getValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, ClassId_AttributeReader::Method_getValue)] = "getValue";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "getAttributeNames")] = ClassId_AttributeReader::Method_getAttributeNames;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, ClassId_AttributeReader::Method_getAttributeNames)] = "getAttributeNames";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseBackupCursor, "Destructor")] = ClassId_DatabaseBackupCursor::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseBackupCursor, ClassId_DatabaseBackupCursor::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseBackupCursor, "fetch")] = ClassId_DatabaseBackupCursor::Method_fetch;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseBackupCursor, ClassId_DatabaseBackupCursor::Method_fetch)] = "fetch";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "Destructor")] = ClassId_DatabaseClient::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, ClassId_DatabaseClient::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "createTransaction")] = ClassId_DatabaseClient::Method_createTransaction;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, ClassId_DatabaseClient::Method_createTransaction)] = "createTransaction";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "createCursor")] = ClassId_DatabaseClient::Method_createCursor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, ClassId_DatabaseClient::Method_createCursor)] = "createCursor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "createBackupCursor")] = ClassId_DatabaseClient::Method_createBackupCursor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, ClassId_DatabaseClient::Method_createBackupCursor)] = "createBackupCursor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "writeImm")] = ClassId_DatabaseClient::Method_writeImm;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, ClassId_DatabaseClient::Method_writeImm)] = "writeImm";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "removeImm")] = ClassId_DatabaseClient::Method_removeImm;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, ClassId_DatabaseClient::Method_removeImm)] = "removeImm";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "readValue")] = ClassId_DatabaseClient::Method_readValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, ClassId_DatabaseClient::Method_readValue)] = "readValue";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "Destructor")] = ClassId_DatabaseCursor::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekUpperBound")] = ClassId_DatabaseCursor::Method_seekUpperBound;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_seekUpperBound)] = "seekUpperBound";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekUpperBoundRestricted")] = ClassId_DatabaseCursor::Method_seekUpperBoundRestricted;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_seekUpperBoundRestricted)] = "seekUpperBoundRestricted";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekFirst")] = ClassId_DatabaseCursor::Method_seekFirst;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_seekFirst)] = "seekFirst";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekLast")] = ClassId_DatabaseCursor::Method_seekLast;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_seekLast)] = "seekLast";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekNext")] = ClassId_DatabaseCursor::Method_seekNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_seekNext)] = "seekNext";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekPrev")] = ClassId_DatabaseCursor::Method_seekPrev;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_seekPrev)] = "seekPrev";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "key")] = ClassId_DatabaseCursor::Method_key;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_key)] = "key";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "value")] = ClassId_DatabaseCursor::Method_value;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, ClassId_DatabaseCursor::Method_value)] = "value";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "Destructor")] = ClassId_Database::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "exists")] = ClassId_Database::Method_exists;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_exists)] = "exists";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "createClient")] = ClassId_Database::Method_createClient;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_createClient)] = "createClient";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "createDatabase")] = ClassId_Database::Method_createDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_createDatabase)] = "createDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "restoreDatabase")] = ClassId_Database::Method_restoreDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_restoreDatabase)] = "restoreDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "destroyDatabase")] = ClassId_Database::Method_destroyDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_destroyDatabase)] = "destroyDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "getConfigDescription")] = ClassId_Database::Method_getConfigDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_getConfigDescription)] = "getConfigDescription";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "getConfigParameters")] = ClassId_Database::Method_getConfigParameters;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, ClassId_Database::Method_getConfigParameters)] = "getConfigParameters";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "Destructor")] = ClassId_DatabaseTransaction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, ClassId_DatabaseTransaction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "createCursor")] = ClassId_DatabaseTransaction::Method_createCursor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, ClassId_DatabaseTransaction::Method_createCursor)] = "createCursor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "write")] = ClassId_DatabaseTransaction::Method_write;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, ClassId_DatabaseTransaction::Method_write)] = "write";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "remove")] = ClassId_DatabaseTransaction::Method_remove;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, ClassId_DatabaseTransaction::Method_remove)] = "remove";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "removeSubTree")] = ClassId_DatabaseTransaction::Method_removeSubTree;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, ClassId_DatabaseTransaction::Method_removeSubTree)] = "removeSubTree";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "commit")] = ClassId_DatabaseTransaction::Method_commit;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, ClassId_DatabaseTransaction::Method_commit)] = "commit";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "rollback")] = ClassId_DatabaseTransaction::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, ClassId_DatabaseTransaction::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzerContext, "Destructor")] = ClassId_DocumentAnalyzerContext::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzerContext, ClassId_DocumentAnalyzerContext::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzerContext, "putInput")] = ClassId_DocumentAnalyzerContext::Method_putInput;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzerContext, ClassId_DocumentAnalyzerContext::Method_putInput)] = "putInput";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzerContext, "analyzeNext")] = ClassId_DocumentAnalyzerContext::Method_analyzeNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzerContext, ClassId_DocumentAnalyzerContext::Method_analyzeNext)] = "analyzeNext";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "Destructor")] = ClassId_DocumentAnalyzer::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "addSearchIndexFeature")] = ClassId_DocumentAnalyzer::Method_addSearchIndexFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_addSearchIndexFeature)] = "addSearchIndexFeature";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "addForwardIndexFeature")] = ClassId_DocumentAnalyzer::Method_addForwardIndexFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_addForwardIndexFeature)] = "addForwardIndexFeature";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineMetaData")] = ClassId_DocumentAnalyzer::Method_defineMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_defineMetaData)] = "defineMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineAggregatedMetaData")] = ClassId_DocumentAnalyzer::Method_defineAggregatedMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_defineAggregatedMetaData)] = "defineAggregatedMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineAttribute")] = ClassId_DocumentAnalyzer::Method_defineAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_defineAttribute)] = "defineAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineSubDocument")] = ClassId_DocumentAnalyzer::Method_defineSubDocument;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_defineSubDocument)] = "defineSubDocument";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "analyze")] = ClassId_DocumentAnalyzer::Method_analyze;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_analyze)] = "analyze";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "createContext")] = ClassId_DocumentAnalyzer::Method_createContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, ClassId_DocumentAnalyzer::Method_createContext)] = "createContext";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentClassDetector, "Destructor")] = ClassId_DocumentClassDetector::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentClassDetector, ClassId_DocumentClassDetector::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentClassDetector, "detect")] = ClassId_DocumentClassDetector::Method_detect;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentClassDetector, ClassId_DocumentClassDetector::Method_detect)] = "detect";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "Destructor")] = ClassId_DocumentTermIterator::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, ClassId_DocumentTermIterator::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "skipDoc")] = ClassId_DocumentTermIterator::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, ClassId_DocumentTermIterator::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "nextTerm")] = ClassId_DocumentTermIterator::Method_nextTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, ClassId_DocumentTermIterator::Method_nextTerm)] = "nextTerm";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "termDocumentFrequency")] = ClassId_DocumentTermIterator::Method_termDocumentFrequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, ClassId_DocumentTermIterator::Method_termDocumentFrequency)] = "termDocumentFrequency";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "termValue")] = ClassId_DocumentTermIterator::Method_termValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, ClassId_DocumentTermIterator::Method_termValue)] = "termValue";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "Destructor")] = ClassId_ForwardIterator::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ClassId_ForwardIterator::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "skipDoc")] = ClassId_ForwardIterator::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ClassId_ForwardIterator::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "skipPos")] = ClassId_ForwardIterator::Method_skipPos;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ClassId_ForwardIterator::Method_skipPos)] = "skipPos";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "fetch")] = ClassId_ForwardIterator::Method_fetch;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ClassId_ForwardIterator::Method_fetch)] = "fetch";
	m_methodnamemap[ MethodNameRef( ClassId_InvAclIterator, "Destructor")] = ClassId_InvAclIterator::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_InvAclIterator, ClassId_InvAclIterator::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_InvAclIterator, "skipDoc")] = ClassId_InvAclIterator::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_InvAclIterator, ClassId_InvAclIterator::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "Destructor")] = ClassId_MetaDataReader::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "hasElement")] = ClassId_MetaDataReader::Method_hasElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_hasElement)] = "hasElement";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "elementHandle")] = ClassId_MetaDataReader::Method_elementHandle;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_elementHandle)] = "elementHandle";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "nofElements")] = ClassId_MetaDataReader::Method_nofElements;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_nofElements)] = "nofElements";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "skipDoc")] = ClassId_MetaDataReader::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "getValue")] = ClassId_MetaDataReader::Method_getValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_getValue)] = "getValue";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "getType")] = ClassId_MetaDataReader::Method_getType;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_getType)] = "getType";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "getName")] = ClassId_MetaDataReader::Method_getName;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, ClassId_MetaDataReader::Method_getName)] = "getName";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestrictionInstance, "Destructor")] = ClassId_MetaDataRestrictionInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestrictionInstance, ClassId_MetaDataRestrictionInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestrictionInstance, "match")] = ClassId_MetaDataRestrictionInstance::Method_match;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestrictionInstance, ClassId_MetaDataRestrictionInstance::Method_match)] = "match";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "Destructor")] = ClassId_MetaDataRestriction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, ClassId_MetaDataRestriction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "addCondition")] = ClassId_MetaDataRestriction::Method_addCondition;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, ClassId_MetaDataRestriction::Method_addCondition)] = "addCondition";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "createInstance")] = ClassId_MetaDataRestriction::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, ClassId_MetaDataRestriction::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "tostring")] = ClassId_MetaDataRestriction::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, ClassId_MetaDataRestriction::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionContext, "Destructor")] = ClassId_NormalizerFunctionContext::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionContext, ClassId_NormalizerFunctionContext::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionContext, "normalize")] = ClassId_NormalizerFunctionContext::Method_normalize;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionContext, ClassId_NormalizerFunctionContext::Method_normalize)] = "normalize";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionInstance, "Destructor")] = ClassId_NormalizerFunctionInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionInstance, ClassId_NormalizerFunctionInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionInstance, "createFunctionContext")] = ClassId_NormalizerFunctionInstance::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionInstance, ClassId_NormalizerFunctionInstance::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunction, "Destructor")] = ClassId_NormalizerFunction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunction, ClassId_NormalizerFunction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunction, "createInstance")] = ClassId_NormalizerFunction::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunction, ClassId_NormalizerFunction::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunction, "getDescription")] = ClassId_NormalizerFunction::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunction, ClassId_NormalizerFunction::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "Destructor")] = ClassId_PostingIterator::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "skipDoc")] = ClassId_PostingIterator::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "skipDocCandidate")] = ClassId_PostingIterator::Method_skipDocCandidate;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_skipDocCandidate)] = "skipDocCandidate";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "skipPos")] = ClassId_PostingIterator::Method_skipPos;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_skipPos)] = "skipPos";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "featureid")] = ClassId_PostingIterator::Method_featureid;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_featureid)] = "featureid";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "documentFrequency")] = ClassId_PostingIterator::Method_documentFrequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_documentFrequency)] = "documentFrequency";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "frequency")] = ClassId_PostingIterator::Method_frequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_frequency)] = "frequency";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "docno")] = ClassId_PostingIterator::Method_docno;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_docno)] = "docno";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "posno")] = ClassId_PostingIterator::Method_posno;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, ClassId_PostingIterator::Method_posno)] = "posno";
	m_methodnamemap[ MethodNameRef( ClassId_PostingJoinOperator, "Destructor")] = ClassId_PostingJoinOperator::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingJoinOperator, ClassId_PostingJoinOperator::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_PostingJoinOperator, "createResultIterator")] = ClassId_PostingJoinOperator::Method_createResultIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingJoinOperator, ClassId_PostingJoinOperator::Method_createResultIterator)] = "createResultIterator";
	m_methodnamemap[ MethodNameRef( ClassId_PostingJoinOperator, "getDescription")] = ClassId_PostingJoinOperator::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingJoinOperator, ClassId_PostingJoinOperator::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "Destructor")] = ClassId_QueryAnalyzer::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, ClassId_QueryAnalyzer::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "definePhraseType")] = ClassId_QueryAnalyzer::Method_definePhraseType;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, ClassId_QueryAnalyzer::Method_definePhraseType)] = "definePhraseType";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "analyzePhrase")] = ClassId_QueryAnalyzer::Method_analyzePhrase;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, ClassId_QueryAnalyzer::Method_analyzePhrase)] = "analyzePhrase";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "analyzePhraseBulk")] = ClassId_QueryAnalyzer::Method_analyzePhraseBulk;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, ClassId_QueryAnalyzer::Method_analyzePhraseBulk)] = "analyzePhraseBulk";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "Destructor")] = ClassId_QueryEval::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addTerm")] = ClassId_QueryEval::Method_addTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_addTerm)] = "addTerm";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addSelectionFeature")] = ClassId_QueryEval::Method_addSelectionFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_addSelectionFeature)] = "addSelectionFeature";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addRestrictionFeature")] = ClassId_QueryEval::Method_addRestrictionFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_addRestrictionFeature)] = "addRestrictionFeature";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addExclusionFeature")] = ClassId_QueryEval::Method_addExclusionFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_addExclusionFeature)] = "addExclusionFeature";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addSummarizerFunction")] = ClassId_QueryEval::Method_addSummarizerFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_addSummarizerFunction)] = "addSummarizerFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addWeightingFunction")] = ClassId_QueryEval::Method_addWeightingFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_addWeightingFunction)] = "addWeightingFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "defineWeightingFormula")] = ClassId_QueryEval::Method_defineWeightingFormula;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_defineWeightingFormula)] = "defineWeightingFormula";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "createQuery")] = ClassId_QueryEval::Method_createQuery;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, ClassId_QueryEval::Method_createQuery)] = "createQuery";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "Destructor")] = ClassId_Query::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "pushTerm")] = ClassId_Query::Method_pushTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_pushTerm)] = "pushTerm";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "pushExpression")] = ClassId_Query::Method_pushExpression;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_pushExpression)] = "pushExpression";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "attachVariable")] = ClassId_Query::Method_attachVariable;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_attachVariable)] = "attachVariable";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "defineFeature")] = ClassId_Query::Method_defineFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_defineFeature)] = "defineFeature";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "defineTermStatistics")] = ClassId_Query::Method_defineTermStatistics;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_defineTermStatistics)] = "defineTermStatistics";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "defineGlobalStatistics")] = ClassId_Query::Method_defineGlobalStatistics;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_defineGlobalStatistics)] = "defineGlobalStatistics";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "addMetaDataRestrictionCondition")] = ClassId_Query::Method_addMetaDataRestrictionCondition;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_addMetaDataRestrictionCondition)] = "addMetaDataRestrictionCondition";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "addDocumentEvaluationSet")] = ClassId_Query::Method_addDocumentEvaluationSet;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_addDocumentEvaluationSet)] = "addDocumentEvaluationSet";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "setMaxNofRanks")] = ClassId_Query::Method_setMaxNofRanks;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_setMaxNofRanks)] = "setMaxNofRanks";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "setMinRank")] = ClassId_Query::Method_setMinRank;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_setMinRank)] = "setMinRank";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "addUserName")] = ClassId_Query::Method_addUserName;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_addUserName)] = "addUserName";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "setWeightingVariableValue")] = ClassId_Query::Method_setWeightingVariableValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_setWeightingVariableValue)] = "setWeightingVariableValue";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "evaluate")] = ClassId_Query::Method_evaluate;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, ClassId_Query::Method_evaluate)] = "evaluate";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "Destructor")] = ClassId_QueryProcessor::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "definePostingJoinOperator")] = ClassId_QueryProcessor::Method_definePostingJoinOperator;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_definePostingJoinOperator)] = "definePostingJoinOperator";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getPostingJoinOperator")] = ClassId_QueryProcessor::Method_getPostingJoinOperator;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_getPostingJoinOperator)] = "getPostingJoinOperator";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "defineWeightingFunction")] = ClassId_QueryProcessor::Method_defineWeightingFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_defineWeightingFunction)] = "defineWeightingFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getWeightingFunction")] = ClassId_QueryProcessor::Method_getWeightingFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_getWeightingFunction)] = "getWeightingFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "defineSummarizerFunction")] = ClassId_QueryProcessor::Method_defineSummarizerFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_defineSummarizerFunction)] = "defineSummarizerFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getSummarizerFunction")] = ClassId_QueryProcessor::Method_getSummarizerFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_getSummarizerFunction)] = "getSummarizerFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getFunctionList")] = ClassId_QueryProcessor::Method_getFunctionList;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_getFunctionList)] = "getFunctionList";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "defineScalarFunctionParser")] = ClassId_QueryProcessor::Method_defineScalarFunctionParser;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_defineScalarFunctionParser)] = "defineScalarFunctionParser";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getScalarFunctionParser")] = ClassId_QueryProcessor::Method_getScalarFunctionParser;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, ClassId_QueryProcessor::Method_getScalarFunctionParser)] = "getScalarFunctionParser";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "Destructor")] = ClassId_ScalarFunctionInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ClassId_ScalarFunctionInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "setVariableValue")] = ClassId_ScalarFunctionInstance::Method_setVariableValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ClassId_ScalarFunctionInstance::Method_setVariableValue)] = "setVariableValue";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "call")] = ClassId_ScalarFunctionInstance::Method_call;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ClassId_ScalarFunctionInstance::Method_call)] = "call";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "tostring")] = ClassId_ScalarFunctionInstance::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ClassId_ScalarFunctionInstance::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "Destructor")] = ClassId_ScalarFunction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ClassId_ScalarFunction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "getVariables")] = ClassId_ScalarFunction::Method_getVariables;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ClassId_ScalarFunction::Method_getVariables)] = "getVariables";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "getNofArguments")] = ClassId_ScalarFunction::Method_getNofArguments;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ClassId_ScalarFunction::Method_getNofArguments)] = "getNofArguments";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "setDefaultVariableValue")] = ClassId_ScalarFunction::Method_setDefaultVariableValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ClassId_ScalarFunction::Method_setDefaultVariableValue)] = "setDefaultVariableValue";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "createInstance")] = ClassId_ScalarFunction::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ClassId_ScalarFunction::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "tostring")] = ClassId_ScalarFunction::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ClassId_ScalarFunction::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionParser, "Destructor")] = ClassId_ScalarFunctionParser::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionParser, ClassId_ScalarFunctionParser::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionParser, "createFunction")] = ClassId_ScalarFunctionParser::Method_createFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionParser, ClassId_ScalarFunctionParser::Method_createFunction)] = "createFunction";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterContext, "Destructor")] = ClassId_SegmenterContext::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterContext, ClassId_SegmenterContext::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterContext, "putInput")] = ClassId_SegmenterContext::Method_putInput;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterContext, ClassId_SegmenterContext::Method_putInput)] = "putInput";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterContext, "getNext")] = ClassId_SegmenterContext::Method_getNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterContext, ClassId_SegmenterContext::Method_getNext)] = "getNext";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "Destructor")] = ClassId_SegmenterInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, ClassId_SegmenterInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "defineSelectorExpression")] = ClassId_SegmenterInstance::Method_defineSelectorExpression;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, ClassId_SegmenterInstance::Method_defineSelectorExpression)] = "defineSelectorExpression";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "defineSubSection")] = ClassId_SegmenterInstance::Method_defineSubSection;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, ClassId_SegmenterInstance::Method_defineSubSection)] = "defineSubSection";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "createContext")] = ClassId_SegmenterInstance::Method_createContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, ClassId_SegmenterInstance::Method_createContext)] = "createContext";
	m_methodnamemap[ MethodNameRef( ClassId_Segmenter, "Destructor")] = ClassId_Segmenter::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Segmenter, ClassId_Segmenter::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Segmenter, "mimeType")] = ClassId_Segmenter::Method_mimeType;
	m_methodnameinvmap[ MethodIdRef( ClassId_Segmenter, ClassId_Segmenter::Method_mimeType)] = "mimeType";
	m_methodnamemap[ MethodNameRef( ClassId_Segmenter, "createInstance")] = ClassId_Segmenter::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_Segmenter, ClassId_Segmenter::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "Destructor")] = ClassId_StatisticsBuilder::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, ClassId_StatisticsBuilder::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "setNofDocumentsInsertedChange")] = ClassId_StatisticsBuilder::Method_setNofDocumentsInsertedChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, ClassId_StatisticsBuilder::Method_setNofDocumentsInsertedChange)] = "setNofDocumentsInsertedChange";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "addDfChange")] = ClassId_StatisticsBuilder::Method_addDfChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, ClassId_StatisticsBuilder::Method_addDfChange)] = "addDfChange";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "start")] = ClassId_StatisticsBuilder::Method_start;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, ClassId_StatisticsBuilder::Method_start)] = "start";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "rollback")] = ClassId_StatisticsBuilder::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, ClassId_StatisticsBuilder::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "fetchMessage")] = ClassId_StatisticsBuilder::Method_fetchMessage;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, ClassId_StatisticsBuilder::Method_fetchMessage)] = "fetchMessage";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsIterator, "Destructor")] = ClassId_StatisticsIterator::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsIterator, ClassId_StatisticsIterator::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsIterator, "getNext")] = ClassId_StatisticsIterator::Method_getNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsIterator, ClassId_StatisticsIterator::Method_getNext)] = "getNext";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsProcessor, "Destructor")] = ClassId_StatisticsProcessor::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsProcessor, ClassId_StatisticsProcessor::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsProcessor, "createViewer")] = ClassId_StatisticsProcessor::Method_createViewer;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsProcessor, ClassId_StatisticsProcessor::Method_createViewer)] = "createViewer";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsProcessor, "createBuilder")] = ClassId_StatisticsProcessor::Method_createBuilder;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsProcessor, ClassId_StatisticsProcessor::Method_createBuilder)] = "createBuilder";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsViewer, "Destructor")] = ClassId_StatisticsViewer::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsViewer, ClassId_StatisticsViewer::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsViewer, "nofDocumentsInsertedChange")] = ClassId_StatisticsViewer::Method_nofDocumentsInsertedChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsViewer, ClassId_StatisticsViewer::Method_nofDocumentsInsertedChange)] = "nofDocumentsInsertedChange";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsViewer, "nextDfChange")] = ClassId_StatisticsViewer::Method_nextDfChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsViewer, ClassId_StatisticsViewer::Method_nextDfChange)] = "nextDfChange";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "Destructor")] = ClassId_StorageAlterMetaDataTable::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "addElement")] = ClassId_StorageAlterMetaDataTable::Method_addElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_addElement)] = "addElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "alterElement")] = ClassId_StorageAlterMetaDataTable::Method_alterElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_alterElement)] = "alterElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "renameElement")] = ClassId_StorageAlterMetaDataTable::Method_renameElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_renameElement)] = "renameElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "deleteElement")] = ClassId_StorageAlterMetaDataTable::Method_deleteElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_deleteElement)] = "deleteElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "clearElement")] = ClassId_StorageAlterMetaDataTable::Method_clearElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_clearElement)] = "clearElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "commit")] = ClassId_StorageAlterMetaDataTable::Method_commit;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_commit)] = "commit";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "rollback")] = ClassId_StorageAlterMetaDataTable::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, ClassId_StorageAlterMetaDataTable::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "Destructor")] = ClassId_StorageClient::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTermPostingIterator")] = ClassId_StorageClient::Method_createTermPostingIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createTermPostingIterator)] = "createTermPostingIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createBrowsePostingIterator")] = ClassId_StorageClient::Method_createBrowsePostingIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createBrowsePostingIterator)] = "createBrowsePostingIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createForwardIterator")] = ClassId_StorageClient::Method_createForwardIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createForwardIterator)] = "createForwardIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDocumentTermIterator")] = ClassId_StorageClient::Method_createDocumentTermIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createDocumentTermIterator)] = "createDocumentTermIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createInvAclIterator")] = ClassId_StorageClient::Method_createInvAclIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createInvAclIterator)] = "createInvAclIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "nofDocumentsInserted")] = ClassId_StorageClient::Method_nofDocumentsInserted;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_nofDocumentsInserted)] = "nofDocumentsInserted";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "documentFrequency")] = ClassId_StorageClient::Method_documentFrequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_documentFrequency)] = "documentFrequency";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "maxDocumentNumber")] = ClassId_StorageClient::Method_maxDocumentNumber;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_maxDocumentNumber)] = "maxDocumentNumber";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "documentNumber")] = ClassId_StorageClient::Method_documentNumber;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_documentNumber)] = "documentNumber";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTermTypeIterator")] = ClassId_StorageClient::Method_createTermTypeIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createTermTypeIterator)] = "createTermTypeIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTermValueIterator")] = ClassId_StorageClient::Method_createTermValueIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createTermValueIterator)] = "createTermValueIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDocIdIterator")] = ClassId_StorageClient::Method_createDocIdIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createDocIdIterator)] = "createDocIdIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createUserNameIterator")] = ClassId_StorageClient::Method_createUserNameIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createUserNameIterator)] = "createUserNameIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "documentStatistics")] = ClassId_StorageClient::Method_documentStatistics;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_documentStatistics)] = "documentStatistics";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createMetaDataReader")] = ClassId_StorageClient::Method_createMetaDataReader;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createMetaDataReader)] = "createMetaDataReader";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createMetaDataRestriction")] = ClassId_StorageClient::Method_createMetaDataRestriction;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createMetaDataRestriction)] = "createMetaDataRestriction";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createAttributeReader")] = ClassId_StorageClient::Method_createAttributeReader;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createAttributeReader)] = "createAttributeReader";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTransaction")] = ClassId_StorageClient::Method_createTransaction;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createTransaction)] = "createTransaction";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createInitStatisticsIterator")] = ClassId_StorageClient::Method_createInitStatisticsIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createInitStatisticsIterator)] = "createInitStatisticsIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createUpdateStatisticsIterator")] = ClassId_StorageClient::Method_createUpdateStatisticsIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createUpdateStatisticsIterator)] = "createUpdateStatisticsIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "getStatisticsProcessor")] = ClassId_StorageClient::Method_getStatisticsProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_getStatisticsProcessor)] = "getStatisticsProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDocumentChecker")] = ClassId_StorageClient::Method_createDocumentChecker;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createDocumentChecker)] = "createDocumentChecker";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "checkStorage")] = ClassId_StorageClient::Method_checkStorage;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_checkStorage)] = "checkStorage";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDump")] = ClassId_StorageClient::Method_createDump;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, ClassId_StorageClient::Method_createDump)] = "createDump";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "Destructor")] = ClassId_StorageDocument::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, ClassId_StorageDocument::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "addSearchIndexTerm")] = ClassId_StorageDocument::Method_addSearchIndexTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, ClassId_StorageDocument::Method_addSearchIndexTerm)] = "addSearchIndexTerm";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "addForwardIndexTerm")] = ClassId_StorageDocument::Method_addForwardIndexTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, ClassId_StorageDocument::Method_addForwardIndexTerm)] = "addForwardIndexTerm";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "setMetaData")] = ClassId_StorageDocument::Method_setMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, ClassId_StorageDocument::Method_setMetaData)] = "setMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "setAttribute")] = ClassId_StorageDocument::Method_setAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, ClassId_StorageDocument::Method_setAttribute)] = "setAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "setUserAccessRight")] = ClassId_StorageDocument::Method_setUserAccessRight;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, ClassId_StorageDocument::Method_setUserAccessRight)] = "setUserAccessRight";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "done")] = ClassId_StorageDocument::Method_done;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, ClassId_StorageDocument::Method_done)] = "done";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "Destructor")] = ClassId_StorageDocumentUpdate::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "setMetaData")] = ClassId_StorageDocumentUpdate::Method_setMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_setMetaData)] = "setMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "setAttribute")] = ClassId_StorageDocumentUpdate::Method_setAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_setAttribute)] = "setAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "clearAttribute")] = ClassId_StorageDocumentUpdate::Method_clearAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_clearAttribute)] = "clearAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "setUserAccessRight")] = ClassId_StorageDocumentUpdate::Method_setUserAccessRight;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_setUserAccessRight)] = "setUserAccessRight";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "clearUserAccessRight")] = ClassId_StorageDocumentUpdate::Method_clearUserAccessRight;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_clearUserAccessRight)] = "clearUserAccessRight";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "clearUserAccessRights")] = ClassId_StorageDocumentUpdate::Method_clearUserAccessRights;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_clearUserAccessRights)] = "clearUserAccessRights";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "done")] = ClassId_StorageDocumentUpdate::Method_done;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, ClassId_StorageDocumentUpdate::Method_done)] = "done";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDump, "Destructor")] = ClassId_StorageDump::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDump, ClassId_StorageDump::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDump, "nextChunk")] = ClassId_StorageDump::Method_nextChunk;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDump, ClassId_StorageDump::Method_nextChunk)] = "nextChunk";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "Destructor")] = ClassId_Storage::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, ClassId_Storage::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "createClient")] = ClassId_Storage::Method_createClient;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, ClassId_Storage::Method_createClient)] = "createClient";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "createStorage")] = ClassId_Storage::Method_createStorage;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, ClassId_Storage::Method_createStorage)] = "createStorage";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "createAlterMetaDataTable")] = ClassId_Storage::Method_createAlterMetaDataTable;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, ClassId_Storage::Method_createAlterMetaDataTable)] = "createAlterMetaDataTable";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "getConfigDescription")] = ClassId_Storage::Method_getConfigDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, ClassId_Storage::Method_getConfigDescription)] = "getConfigDescription";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "getConfigParameters")] = ClassId_Storage::Method_getConfigParameters;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, ClassId_Storage::Method_getConfigParameters)] = "getConfigParameters";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "Destructor")] = ClassId_StorageObjectBuilder::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getStorage")] = ClassId_StorageObjectBuilder::Method_getStorage;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_getStorage)] = "getStorage";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getDatabase")] = ClassId_StorageObjectBuilder::Method_getDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_getDatabase)] = "getDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getQueryProcessor")] = ClassId_StorageObjectBuilder::Method_getQueryProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_getQueryProcessor)] = "getQueryProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getStatisticsProcessor")] = ClassId_StorageObjectBuilder::Method_getStatisticsProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_getStatisticsProcessor)] = "getStatisticsProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "createStorageClient")] = ClassId_StorageObjectBuilder::Method_createStorageClient;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_createStorageClient)] = "createStorageClient";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "createAlterMetaDataTable")] = ClassId_StorageObjectBuilder::Method_createAlterMetaDataTable;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_createAlterMetaDataTable)] = "createAlterMetaDataTable";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "createQueryEval")] = ClassId_StorageObjectBuilder::Method_createQueryEval;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, ClassId_StorageObjectBuilder::Method_createQueryEval)] = "createQueryEval";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "Destructor")] = ClassId_StorageTransaction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "createDocument")] = ClassId_StorageTransaction::Method_createDocument;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_createDocument)] = "createDocument";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "createDocumentUpdate")] = ClassId_StorageTransaction::Method_createDocumentUpdate;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_createDocumentUpdate)] = "createDocumentUpdate";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "deleteDocument")] = ClassId_StorageTransaction::Method_deleteDocument;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_deleteDocument)] = "deleteDocument";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "deleteUserAccessRights")] = ClassId_StorageTransaction::Method_deleteUserAccessRights;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_deleteUserAccessRights)] = "deleteUserAccessRights";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "updateMetaData")] = ClassId_StorageTransaction::Method_updateMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_updateMetaData)] = "updateMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "commit")] = ClassId_StorageTransaction::Method_commit;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_commit)] = "commit";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "rollback")] = ClassId_StorageTransaction::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, ClassId_StorageTransaction::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionContext, "Destructor")] = ClassId_SummarizerFunctionContext::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionContext, ClassId_SummarizerFunctionContext::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionContext, "addSummarizationFeature")] = ClassId_SummarizerFunctionContext::Method_addSummarizationFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionContext, ClassId_SummarizerFunctionContext::Method_addSummarizationFeature)] = "addSummarizationFeature";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionContext, "getSummary")] = ClassId_SummarizerFunctionContext::Method_getSummary;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionContext, ClassId_SummarizerFunctionContext::Method_getSummary)] = "getSummary";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "Destructor")] = ClassId_SummarizerFunctionInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, ClassId_SummarizerFunctionInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "addStringParameter")] = ClassId_SummarizerFunctionInstance::Method_addStringParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, ClassId_SummarizerFunctionInstance::Method_addStringParameter)] = "addStringParameter";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "addNumericParameter")] = ClassId_SummarizerFunctionInstance::Method_addNumericParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, ClassId_SummarizerFunctionInstance::Method_addNumericParameter)] = "addNumericParameter";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "createFunctionContext")] = ClassId_SummarizerFunctionInstance::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, ClassId_SummarizerFunctionInstance::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "tostring")] = ClassId_SummarizerFunctionInstance::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, ClassId_SummarizerFunctionInstance::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunction, "Destructor")] = ClassId_SummarizerFunction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunction, ClassId_SummarizerFunction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunction, "createInstance")] = ClassId_SummarizerFunction::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunction, ClassId_SummarizerFunction::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunction, "getDescription")] = ClassId_SummarizerFunction::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunction, ClassId_SummarizerFunction::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "Destructor")] = ClassId_TextProcessor::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "addResourcePath")] = ClassId_TextProcessor::Method_addResourcePath;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_addResourcePath)] = "addResourcePath";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getResourcePath")] = ClassId_TextProcessor::Method_getResourcePath;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_getResourcePath)] = "getResourcePath";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getTokenizer")] = ClassId_TextProcessor::Method_getTokenizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_getTokenizer)] = "getTokenizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getNormalizer")] = ClassId_TextProcessor::Method_getNormalizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_getNormalizer)] = "getNormalizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getAggregator")] = ClassId_TextProcessor::Method_getAggregator;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_getAggregator)] = "getAggregator";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "detectDocumentClass")] = ClassId_TextProcessor::Method_detectDocumentClass;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_detectDocumentClass)] = "detectDocumentClass";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineDocumentClassDetector")] = ClassId_TextProcessor::Method_defineDocumentClassDetector;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_defineDocumentClassDetector)] = "defineDocumentClassDetector";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineTokenizer")] = ClassId_TextProcessor::Method_defineTokenizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_defineTokenizer)] = "defineTokenizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineNormalizer")] = ClassId_TextProcessor::Method_defineNormalizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_defineNormalizer)] = "defineNormalizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineAggregator")] = ClassId_TextProcessor::Method_defineAggregator;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_defineAggregator)] = "defineAggregator";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getFunctionList")] = ClassId_TextProcessor::Method_getFunctionList;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, ClassId_TextProcessor::Method_getFunctionList)] = "getFunctionList";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionContext, "Destructor")] = ClassId_TokenizerFunctionContext::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionContext, ClassId_TokenizerFunctionContext::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionContext, "tokenize")] = ClassId_TokenizerFunctionContext::Method_tokenize;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionContext, ClassId_TokenizerFunctionContext::Method_tokenize)] = "tokenize";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionInstance, "Destructor")] = ClassId_TokenizerFunctionInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionInstance, ClassId_TokenizerFunctionInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionInstance, "concatBeforeTokenize")] = ClassId_TokenizerFunctionInstance::Method_concatBeforeTokenize;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionInstance, ClassId_TokenizerFunctionInstance::Method_concatBeforeTokenize)] = "concatBeforeTokenize";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionInstance, "createFunctionContext")] = ClassId_TokenizerFunctionInstance::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionInstance, ClassId_TokenizerFunctionInstance::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunction, "Destructor")] = ClassId_TokenizerFunction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunction, ClassId_TokenizerFunction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunction, "createInstance")] = ClassId_TokenizerFunction::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunction, ClassId_TokenizerFunction::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunction, "getDescription")] = ClassId_TokenizerFunction::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunction, ClassId_TokenizerFunction::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_ValueIterator, "Destructor")] = ClassId_ValueIterator::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ValueIterator, ClassId_ValueIterator::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ValueIterator, "skip")] = ClassId_ValueIterator::Method_skip;
	m_methodnameinvmap[ MethodIdRef( ClassId_ValueIterator, ClassId_ValueIterator::Method_skip)] = "skip";
	m_methodnamemap[ MethodNameRef( ClassId_ValueIterator, "fetchValues")] = ClassId_ValueIterator::Method_fetchValues;
	m_methodnameinvmap[ MethodIdRef( ClassId_ValueIterator, ClassId_ValueIterator::Method_fetchValues)] = "fetchValues";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionContext, "Destructor")] = ClassId_WeightingFunctionContext::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionContext, ClassId_WeightingFunctionContext::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionContext, "addWeightingFeature")] = ClassId_WeightingFunctionContext::Method_addWeightingFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionContext, ClassId_WeightingFunctionContext::Method_addWeightingFeature)] = "addWeightingFeature";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionContext, "call")] = ClassId_WeightingFunctionContext::Method_call;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionContext, ClassId_WeightingFunctionContext::Method_call)] = "call";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "Destructor")] = ClassId_WeightingFunctionInstance::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, ClassId_WeightingFunctionInstance::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "addStringParameter")] = ClassId_WeightingFunctionInstance::Method_addStringParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, ClassId_WeightingFunctionInstance::Method_addStringParameter)] = "addStringParameter";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "addNumericParameter")] = ClassId_WeightingFunctionInstance::Method_addNumericParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, ClassId_WeightingFunctionInstance::Method_addNumericParameter)] = "addNumericParameter";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "createFunctionContext")] = ClassId_WeightingFunctionInstance::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, ClassId_WeightingFunctionInstance::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "tostring")] = ClassId_WeightingFunctionInstance::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, ClassId_WeightingFunctionInstance::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunction, "Destructor")] = ClassId_WeightingFunction::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunction, ClassId_WeightingFunction::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunction, "createInstance")] = ClassId_WeightingFunction::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunction, ClassId_WeightingFunction::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunction, "getDescription")] = ClassId_WeightingFunction::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunction, ClassId_WeightingFunction::Method_getDescription)] = "getDescription";
}


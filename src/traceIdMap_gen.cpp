/*
* Copyright (c) 2016 Patrick P. Frey
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/// \brief Fill map of strings to identifiers and back for objects and methods for serialization
/// \note PROGRAM (strusTraceCodeGen) GENERATED FILE! DO NOT MODIFY!!!
/// \file traceIdMap_gen.cpp
#include "traceIdMap.hpp"
#include "objectIds_gen.hpp"

using namespace strus;

void TraceIdMap::fillMaps()
{
	m_classnamemap["AggregatorFunctionInstance"] = ClassId_AggregatorFunctionInstance;
	m_classnamear.push_back( "AggregatorFunctionInstance");
	m_classnamemap["AggregatorFunction"] = ClassId_AggregatorFunction;
	m_classnamear.push_back( "AggregatorFunction");
	m_classnamemap["AnalyzerObjectBuilder"] = ClassId_AnalyzerObjectBuilder;
	m_classnamear.push_back( "AnalyzerObjectBuilder");
	m_classnamemap["AttributeReader"] = ClassId_AttributeReader;
	m_classnamear.push_back( "AttributeReader");
	m_classnamemap["DatabaseBackupCursor"] = ClassId_DatabaseBackupCursor;
	m_classnamear.push_back( "DatabaseBackupCursor");
	m_classnamemap["DatabaseClient"] = ClassId_DatabaseClient;
	m_classnamear.push_back( "DatabaseClient");
	m_classnamemap["DatabaseCursor"] = ClassId_DatabaseCursor;
	m_classnamear.push_back( "DatabaseCursor");
	m_classnamemap["Database"] = ClassId_Database;
	m_classnamear.push_back( "Database");
	m_classnamemap["DatabaseTransaction"] = ClassId_DatabaseTransaction;
	m_classnamear.push_back( "DatabaseTransaction");
	m_classnamemap["DocumentAnalyzerContext"] = ClassId_DocumentAnalyzerContext;
	m_classnamear.push_back( "DocumentAnalyzerContext");
	m_classnamemap["DocumentAnalyzer"] = ClassId_DocumentAnalyzer;
	m_classnamear.push_back( "DocumentAnalyzer");
	m_classnamemap["DocumentClassDetector"] = ClassId_DocumentClassDetector;
	m_classnamear.push_back( "DocumentClassDetector");
	m_classnamemap["DocumentTermIterator"] = ClassId_DocumentTermIterator;
	m_classnamear.push_back( "DocumentTermIterator");
	m_classnamemap["ForwardIterator"] = ClassId_ForwardIterator;
	m_classnamear.push_back( "ForwardIterator");
	m_classnamemap["InvAclIterator"] = ClassId_InvAclIterator;
	m_classnamear.push_back( "InvAclIterator");
	m_classnamemap["MetaDataReader"] = ClassId_MetaDataReader;
	m_classnamear.push_back( "MetaDataReader");
	m_classnamemap["MetaDataRestrictionInstance"] = ClassId_MetaDataRestrictionInstance;
	m_classnamear.push_back( "MetaDataRestrictionInstance");
	m_classnamemap["MetaDataRestriction"] = ClassId_MetaDataRestriction;
	m_classnamear.push_back( "MetaDataRestriction");
	m_classnamemap["NormalizerFunctionContext"] = ClassId_NormalizerFunctionContext;
	m_classnamear.push_back( "NormalizerFunctionContext");
	m_classnamemap["NormalizerFunctionInstance"] = ClassId_NormalizerFunctionInstance;
	m_classnamear.push_back( "NormalizerFunctionInstance");
	m_classnamemap["NormalizerFunction"] = ClassId_NormalizerFunction;
	m_classnamear.push_back( "NormalizerFunction");
	m_classnamemap["PostingIterator"] = ClassId_PostingIterator;
	m_classnamear.push_back( "PostingIterator");
	m_classnamemap["PostingJoinOperator"] = ClassId_PostingJoinOperator;
	m_classnamear.push_back( "PostingJoinOperator");
	m_classnamemap["QueryAnalyzer"] = ClassId_QueryAnalyzer;
	m_classnamear.push_back( "QueryAnalyzer");
	m_classnamemap["QueryEval"] = ClassId_QueryEval;
	m_classnamear.push_back( "QueryEval");
	m_classnamemap["Query"] = ClassId_Query;
	m_classnamear.push_back( "Query");
	m_classnamemap["QueryProcessor"] = ClassId_QueryProcessor;
	m_classnamear.push_back( "QueryProcessor");
	m_classnamemap["ScalarFunctionInstance"] = ClassId_ScalarFunctionInstance;
	m_classnamear.push_back( "ScalarFunctionInstance");
	m_classnamemap["ScalarFunction"] = ClassId_ScalarFunction;
	m_classnamear.push_back( "ScalarFunction");
	m_classnamemap["ScalarFunctionParser"] = ClassId_ScalarFunctionParser;
	m_classnamear.push_back( "ScalarFunctionParser");
	m_classnamemap["SegmenterContext"] = ClassId_SegmenterContext;
	m_classnamear.push_back( "SegmenterContext");
	m_classnamemap["SegmenterInstance"] = ClassId_SegmenterInstance;
	m_classnamear.push_back( "SegmenterInstance");
	m_classnamemap["Segmenter"] = ClassId_Segmenter;
	m_classnamear.push_back( "Segmenter");
	m_classnamemap["StatisticsBuilder"] = ClassId_StatisticsBuilder;
	m_classnamear.push_back( "StatisticsBuilder");
	m_classnamemap["StatisticsIterator"] = ClassId_StatisticsIterator;
	m_classnamear.push_back( "StatisticsIterator");
	m_classnamemap["StatisticsProcessor"] = ClassId_StatisticsProcessor;
	m_classnamear.push_back( "StatisticsProcessor");
	m_classnamemap["StatisticsViewer"] = ClassId_StatisticsViewer;
	m_classnamear.push_back( "StatisticsViewer");
	m_classnamemap["StorageAlterMetaDataTable"] = ClassId_StorageAlterMetaDataTable;
	m_classnamear.push_back( "StorageAlterMetaDataTable");
	m_classnamemap["StorageClient"] = ClassId_StorageClient;
	m_classnamear.push_back( "StorageClient");
	m_classnamemap["StorageDocument"] = ClassId_StorageDocument;
	m_classnamear.push_back( "StorageDocument");
	m_classnamemap["StorageDocumentUpdate"] = ClassId_StorageDocumentUpdate;
	m_classnamear.push_back( "StorageDocumentUpdate");
	m_classnamemap["StorageDump"] = ClassId_StorageDump;
	m_classnamear.push_back( "StorageDump");
	m_classnamemap["Storage"] = ClassId_Storage;
	m_classnamear.push_back( "Storage");
	m_classnamemap["StorageObjectBuilder"] = ClassId_StorageObjectBuilder;
	m_classnamear.push_back( "StorageObjectBuilder");
	m_classnamemap["StorageTransaction"] = ClassId_StorageTransaction;
	m_classnamear.push_back( "StorageTransaction");
	m_classnamemap["SummarizerFunctionContext"] = ClassId_SummarizerFunctionContext;
	m_classnamear.push_back( "SummarizerFunctionContext");
	m_classnamemap["SummarizerFunctionInstance"] = ClassId_SummarizerFunctionInstance;
	m_classnamear.push_back( "SummarizerFunctionInstance");
	m_classnamemap["SummarizerFunction"] = ClassId_SummarizerFunction;
	m_classnamear.push_back( "SummarizerFunction");
	m_classnamemap["TextProcessor"] = ClassId_TextProcessor;
	m_classnamear.push_back( "TextProcessor");
	m_classnamemap["TokenizerFunctionContext"] = ClassId_TokenizerFunctionContext;
	m_classnamear.push_back( "TokenizerFunctionContext");
	m_classnamemap["TokenizerFunctionInstance"] = ClassId_TokenizerFunctionInstance;
	m_classnamear.push_back( "TokenizerFunctionInstance");
	m_classnamemap["TokenizerFunction"] = ClassId_TokenizerFunction;
	m_classnamear.push_back( "TokenizerFunction");
	m_classnamemap["ValueIterator"] = ClassId_ValueIterator;
	m_classnamear.push_back( "ValueIterator");
	m_classnamemap["WeightingFunctionContext"] = ClassId_WeightingFunctionContext;
	m_classnamear.push_back( "WeightingFunctionContext");
	m_classnamemap["WeightingFunctionInstance"] = ClassId_WeightingFunctionInstance;
	m_classnamear.push_back( "WeightingFunctionInstance");
	m_classnamemap["WeightingFunction"] = ClassId_WeightingFunction;
	m_classnamear.push_back( "WeightingFunction");
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunctionInstance, "Destructor")] = AggregatorFunctionInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunctionInstance, AggregatorFunctionInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunctionInstance, "evaluate")] = AggregatorFunctionInstanceConst::Method_evaluate;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunctionInstance, AggregatorFunctionInstanceConst::Method_evaluate)] = "evaluate";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunction, "Destructor")] = AggregatorFunctionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunction, AggregatorFunctionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunction, "createInstance")] = AggregatorFunctionConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunction, AggregatorFunctionConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_AggregatorFunction, "getDescription")] = AggregatorFunctionConst::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_AggregatorFunction, AggregatorFunctionConst::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "Destructor")] = AnalyzerObjectBuilderConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, AnalyzerObjectBuilderConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "getTextProcessor")] = AnalyzerObjectBuilderConst::Method_getTextProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, AnalyzerObjectBuilderConst::Method_getTextProcessor)] = "getTextProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "createSegmenter")] = AnalyzerObjectBuilderConst::Method_createSegmenter;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, AnalyzerObjectBuilderConst::Method_createSegmenter)] = "createSegmenter";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "createDocumentAnalyzer")] = AnalyzerObjectBuilderConst::Method_createDocumentAnalyzer;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, AnalyzerObjectBuilderConst::Method_createDocumentAnalyzer)] = "createDocumentAnalyzer";
	m_methodnamemap[ MethodNameRef( ClassId_AnalyzerObjectBuilder, "createQueryAnalyzer")] = AnalyzerObjectBuilderConst::Method_createQueryAnalyzer;
	m_methodnameinvmap[ MethodIdRef( ClassId_AnalyzerObjectBuilder, AnalyzerObjectBuilderConst::Method_createQueryAnalyzer)] = "createQueryAnalyzer";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "Destructor")] = AttributeReaderConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, AttributeReaderConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "elementHandle")] = AttributeReaderConst::Method_elementHandle;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, AttributeReaderConst::Method_elementHandle)] = "elementHandle";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "skipDoc")] = AttributeReaderConst::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, AttributeReaderConst::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "getValue")] = AttributeReaderConst::Method_getValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, AttributeReaderConst::Method_getValue)] = "getValue";
	m_methodnamemap[ MethodNameRef( ClassId_AttributeReader, "getAttributeNames")] = AttributeReaderConst::Method_getAttributeNames;
	m_methodnameinvmap[ MethodIdRef( ClassId_AttributeReader, AttributeReaderConst::Method_getAttributeNames)] = "getAttributeNames";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseBackupCursor, "Destructor")] = DatabaseBackupCursorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseBackupCursor, DatabaseBackupCursorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseBackupCursor, "fetch")] = DatabaseBackupCursorConst::Method_fetch;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseBackupCursor, DatabaseBackupCursorConst::Method_fetch)] = "fetch";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "Destructor")] = DatabaseClientConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, DatabaseClientConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "createTransaction")] = DatabaseClientConst::Method_createTransaction;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, DatabaseClientConst::Method_createTransaction)] = "createTransaction";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "createCursor")] = DatabaseClientConst::Method_createCursor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, DatabaseClientConst::Method_createCursor)] = "createCursor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "createBackupCursor")] = DatabaseClientConst::Method_createBackupCursor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, DatabaseClientConst::Method_createBackupCursor)] = "createBackupCursor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "writeImm")] = DatabaseClientConst::Method_writeImm;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, DatabaseClientConst::Method_writeImm)] = "writeImm";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "removeImm")] = DatabaseClientConst::Method_removeImm;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, DatabaseClientConst::Method_removeImm)] = "removeImm";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseClient, "readValue")] = DatabaseClientConst::Method_readValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseClient, DatabaseClientConst::Method_readValue)] = "readValue";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "Destructor")] = DatabaseCursorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekUpperBound")] = DatabaseCursorConst::Method_seekUpperBound;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_seekUpperBound)] = "seekUpperBound";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekUpperBoundRestricted")] = DatabaseCursorConst::Method_seekUpperBoundRestricted;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_seekUpperBoundRestricted)] = "seekUpperBoundRestricted";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekFirst")] = DatabaseCursorConst::Method_seekFirst;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_seekFirst)] = "seekFirst";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekLast")] = DatabaseCursorConst::Method_seekLast;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_seekLast)] = "seekLast";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekNext")] = DatabaseCursorConst::Method_seekNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_seekNext)] = "seekNext";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "seekPrev")] = DatabaseCursorConst::Method_seekPrev;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_seekPrev)] = "seekPrev";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "key")] = DatabaseCursorConst::Method_key;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_key)] = "key";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseCursor, "value")] = DatabaseCursorConst::Method_value;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseCursor, DatabaseCursorConst::Method_value)] = "value";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "Destructor")] = DatabaseConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "exists")] = DatabaseConst::Method_exists;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_exists)] = "exists";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "createClient")] = DatabaseConst::Method_createClient;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_createClient)] = "createClient";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "createDatabase")] = DatabaseConst::Method_createDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_createDatabase)] = "createDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "restoreDatabase")] = DatabaseConst::Method_restoreDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_restoreDatabase)] = "restoreDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "destroyDatabase")] = DatabaseConst::Method_destroyDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_destroyDatabase)] = "destroyDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "getConfigDescription")] = DatabaseConst::Method_getConfigDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_getConfigDescription)] = "getConfigDescription";
	m_methodnamemap[ MethodNameRef( ClassId_Database, "getConfigParameters")] = DatabaseConst::Method_getConfigParameters;
	m_methodnameinvmap[ MethodIdRef( ClassId_Database, DatabaseConst::Method_getConfigParameters)] = "getConfigParameters";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "Destructor")] = DatabaseTransactionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, DatabaseTransactionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "createCursor")] = DatabaseTransactionConst::Method_createCursor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, DatabaseTransactionConst::Method_createCursor)] = "createCursor";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "write")] = DatabaseTransactionConst::Method_write;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, DatabaseTransactionConst::Method_write)] = "write";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "remove")] = DatabaseTransactionConst::Method_remove;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, DatabaseTransactionConst::Method_remove)] = "remove";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "removeSubTree")] = DatabaseTransactionConst::Method_removeSubTree;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, DatabaseTransactionConst::Method_removeSubTree)] = "removeSubTree";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "commit")] = DatabaseTransactionConst::Method_commit;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, DatabaseTransactionConst::Method_commit)] = "commit";
	m_methodnamemap[ MethodNameRef( ClassId_DatabaseTransaction, "rollback")] = DatabaseTransactionConst::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_DatabaseTransaction, DatabaseTransactionConst::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzerContext, "Destructor")] = DocumentAnalyzerContextConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzerContext, DocumentAnalyzerContextConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzerContext, "putInput")] = DocumentAnalyzerContextConst::Method_putInput;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzerContext, DocumentAnalyzerContextConst::Method_putInput)] = "putInput";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzerContext, "analyzeNext")] = DocumentAnalyzerContextConst::Method_analyzeNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzerContext, DocumentAnalyzerContextConst::Method_analyzeNext)] = "analyzeNext";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "Destructor")] = DocumentAnalyzerConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "addSearchIndexFeature")] = DocumentAnalyzerConst::Method_addSearchIndexFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_addSearchIndexFeature)] = "addSearchIndexFeature";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "addForwardIndexFeature")] = DocumentAnalyzerConst::Method_addForwardIndexFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_addForwardIndexFeature)] = "addForwardIndexFeature";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineMetaData")] = DocumentAnalyzerConst::Method_defineMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_defineMetaData)] = "defineMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineAggregatedMetaData")] = DocumentAnalyzerConst::Method_defineAggregatedMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_defineAggregatedMetaData)] = "defineAggregatedMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineAttribute")] = DocumentAnalyzerConst::Method_defineAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_defineAttribute)] = "defineAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "defineSubDocument")] = DocumentAnalyzerConst::Method_defineSubDocument;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_defineSubDocument)] = "defineSubDocument";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "analyze")] = DocumentAnalyzerConst::Method_analyze;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_analyze)] = "analyze";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentAnalyzer, "createContext")] = DocumentAnalyzerConst::Method_createContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentAnalyzer, DocumentAnalyzerConst::Method_createContext)] = "createContext";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentClassDetector, "Destructor")] = DocumentClassDetectorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentClassDetector, DocumentClassDetectorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentClassDetector, "detect")] = DocumentClassDetectorConst::Method_detect;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentClassDetector, DocumentClassDetectorConst::Method_detect)] = "detect";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "Destructor")] = DocumentTermIteratorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, DocumentTermIteratorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "skipDoc")] = DocumentTermIteratorConst::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, DocumentTermIteratorConst::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "nextTerm")] = DocumentTermIteratorConst::Method_nextTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, DocumentTermIteratorConst::Method_nextTerm)] = "nextTerm";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "termDocumentFrequency")] = DocumentTermIteratorConst::Method_termDocumentFrequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, DocumentTermIteratorConst::Method_termDocumentFrequency)] = "termDocumentFrequency";
	m_methodnamemap[ MethodNameRef( ClassId_DocumentTermIterator, "termValue")] = DocumentTermIteratorConst::Method_termValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_DocumentTermIterator, DocumentTermIteratorConst::Method_termValue)] = "termValue";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "Destructor")] = ForwardIteratorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ForwardIteratorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "skipDoc")] = ForwardIteratorConst::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ForwardIteratorConst::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "skipPos")] = ForwardIteratorConst::Method_skipPos;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ForwardIteratorConst::Method_skipPos)] = "skipPos";
	m_methodnamemap[ MethodNameRef( ClassId_ForwardIterator, "fetch")] = ForwardIteratorConst::Method_fetch;
	m_methodnameinvmap[ MethodIdRef( ClassId_ForwardIterator, ForwardIteratorConst::Method_fetch)] = "fetch";
	m_methodnamemap[ MethodNameRef( ClassId_InvAclIterator, "Destructor")] = InvAclIteratorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_InvAclIterator, InvAclIteratorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_InvAclIterator, "skipDoc")] = InvAclIteratorConst::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_InvAclIterator, InvAclIteratorConst::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "Destructor")] = MetaDataReaderConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "hasElement")] = MetaDataReaderConst::Method_hasElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_hasElement)] = "hasElement";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "elementHandle")] = MetaDataReaderConst::Method_elementHandle;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_elementHandle)] = "elementHandle";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "nofElements")] = MetaDataReaderConst::Method_nofElements;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_nofElements)] = "nofElements";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "skipDoc")] = MetaDataReaderConst::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "getValue")] = MetaDataReaderConst::Method_getValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_getValue)] = "getValue";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "getType")] = MetaDataReaderConst::Method_getType;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_getType)] = "getType";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataReader, "getName")] = MetaDataReaderConst::Method_getName;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataReader, MetaDataReaderConst::Method_getName)] = "getName";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestrictionInstance, "Destructor")] = MetaDataRestrictionInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestrictionInstance, MetaDataRestrictionInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestrictionInstance, "match")] = MetaDataRestrictionInstanceConst::Method_match;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestrictionInstance, MetaDataRestrictionInstanceConst::Method_match)] = "match";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "Destructor")] = MetaDataRestrictionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, MetaDataRestrictionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "addCondition")] = MetaDataRestrictionConst::Method_addCondition;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, MetaDataRestrictionConst::Method_addCondition)] = "addCondition";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "createInstance")] = MetaDataRestrictionConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, MetaDataRestrictionConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_MetaDataRestriction, "tostring")] = MetaDataRestrictionConst::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_MetaDataRestriction, MetaDataRestrictionConst::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionContext, "Destructor")] = NormalizerFunctionContextConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionContext, NormalizerFunctionContextConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionContext, "normalize")] = NormalizerFunctionContextConst::Method_normalize;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionContext, NormalizerFunctionContextConst::Method_normalize)] = "normalize";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionInstance, "Destructor")] = NormalizerFunctionInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionInstance, NormalizerFunctionInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunctionInstance, "createFunctionContext")] = NormalizerFunctionInstanceConst::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunctionInstance, NormalizerFunctionInstanceConst::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunction, "Destructor")] = NormalizerFunctionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunction, NormalizerFunctionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunction, "createInstance")] = NormalizerFunctionConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunction, NormalizerFunctionConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_NormalizerFunction, "getDescription")] = NormalizerFunctionConst::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_NormalizerFunction, NormalizerFunctionConst::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "Destructor")] = PostingIteratorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "skipDoc")] = PostingIteratorConst::Method_skipDoc;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_skipDoc)] = "skipDoc";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "skipDocCandidate")] = PostingIteratorConst::Method_skipDocCandidate;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_skipDocCandidate)] = "skipDocCandidate";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "skipPos")] = PostingIteratorConst::Method_skipPos;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_skipPos)] = "skipPos";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "featureid")] = PostingIteratorConst::Method_featureid;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_featureid)] = "featureid";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "documentFrequency")] = PostingIteratorConst::Method_documentFrequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_documentFrequency)] = "documentFrequency";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "frequency")] = PostingIteratorConst::Method_frequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_frequency)] = "frequency";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "docno")] = PostingIteratorConst::Method_docno;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_docno)] = "docno";
	m_methodnamemap[ MethodNameRef( ClassId_PostingIterator, "posno")] = PostingIteratorConst::Method_posno;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingIterator, PostingIteratorConst::Method_posno)] = "posno";
	m_methodnamemap[ MethodNameRef( ClassId_PostingJoinOperator, "Destructor")] = PostingJoinOperatorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingJoinOperator, PostingJoinOperatorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_PostingJoinOperator, "createResultIterator")] = PostingJoinOperatorConst::Method_createResultIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingJoinOperator, PostingJoinOperatorConst::Method_createResultIterator)] = "createResultIterator";
	m_methodnamemap[ MethodNameRef( ClassId_PostingJoinOperator, "getDescription")] = PostingJoinOperatorConst::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_PostingJoinOperator, PostingJoinOperatorConst::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "Destructor")] = QueryAnalyzerConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, QueryAnalyzerConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "definePhraseType")] = QueryAnalyzerConst::Method_definePhraseType;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, QueryAnalyzerConst::Method_definePhraseType)] = "definePhraseType";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "analyzePhrase")] = QueryAnalyzerConst::Method_analyzePhrase;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, QueryAnalyzerConst::Method_analyzePhrase)] = "analyzePhrase";
	m_methodnamemap[ MethodNameRef( ClassId_QueryAnalyzer, "analyzePhraseBulk")] = QueryAnalyzerConst::Method_analyzePhraseBulk;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryAnalyzer, QueryAnalyzerConst::Method_analyzePhraseBulk)] = "analyzePhraseBulk";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "Destructor")] = QueryEvalConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addTerm")] = QueryEvalConst::Method_addTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_addTerm)] = "addTerm";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addSelectionFeature")] = QueryEvalConst::Method_addSelectionFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_addSelectionFeature)] = "addSelectionFeature";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addRestrictionFeature")] = QueryEvalConst::Method_addRestrictionFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_addRestrictionFeature)] = "addRestrictionFeature";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addExclusionFeature")] = QueryEvalConst::Method_addExclusionFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_addExclusionFeature)] = "addExclusionFeature";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addSummarizerFunction")] = QueryEvalConst::Method_addSummarizerFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_addSummarizerFunction)] = "addSummarizerFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "addWeightingFunction")] = QueryEvalConst::Method_addWeightingFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_addWeightingFunction)] = "addWeightingFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "defineWeightingFormula")] = QueryEvalConst::Method_defineWeightingFormula;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_defineWeightingFormula)] = "defineWeightingFormula";
	m_methodnamemap[ MethodNameRef( ClassId_QueryEval, "createQuery")] = QueryEvalConst::Method_createQuery;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryEval, QueryEvalConst::Method_createQuery)] = "createQuery";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "Destructor")] = QueryConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "pushTerm")] = QueryConst::Method_pushTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_pushTerm)] = "pushTerm";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "pushExpression")] = QueryConst::Method_pushExpression;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_pushExpression)] = "pushExpression";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "attachVariable")] = QueryConst::Method_attachVariable;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_attachVariable)] = "attachVariable";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "defineFeature")] = QueryConst::Method_defineFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_defineFeature)] = "defineFeature";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "defineTermStatistics")] = QueryConst::Method_defineTermStatistics;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_defineTermStatistics)] = "defineTermStatistics";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "defineGlobalStatistics")] = QueryConst::Method_defineGlobalStatistics;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_defineGlobalStatistics)] = "defineGlobalStatistics";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "addMetaDataRestrictionCondition")] = QueryConst::Method_addMetaDataRestrictionCondition;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_addMetaDataRestrictionCondition)] = "addMetaDataRestrictionCondition";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "addDocumentEvaluationSet")] = QueryConst::Method_addDocumentEvaluationSet;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_addDocumentEvaluationSet)] = "addDocumentEvaluationSet";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "setMaxNofRanks")] = QueryConst::Method_setMaxNofRanks;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_setMaxNofRanks)] = "setMaxNofRanks";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "setMinRank")] = QueryConst::Method_setMinRank;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_setMinRank)] = "setMinRank";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "addUserName")] = QueryConst::Method_addUserName;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_addUserName)] = "addUserName";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "setWeightingVariableValue")] = QueryConst::Method_setWeightingVariableValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_setWeightingVariableValue)] = "setWeightingVariableValue";
	m_methodnamemap[ MethodNameRef( ClassId_Query, "evaluate")] = QueryConst::Method_evaluate;
	m_methodnameinvmap[ MethodIdRef( ClassId_Query, QueryConst::Method_evaluate)] = "evaluate";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "Destructor")] = QueryProcessorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "definePostingJoinOperator")] = QueryProcessorConst::Method_definePostingJoinOperator;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_definePostingJoinOperator)] = "definePostingJoinOperator";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getPostingJoinOperator")] = QueryProcessorConst::Method_getPostingJoinOperator;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_getPostingJoinOperator)] = "getPostingJoinOperator";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "defineWeightingFunction")] = QueryProcessorConst::Method_defineWeightingFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_defineWeightingFunction)] = "defineWeightingFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getWeightingFunction")] = QueryProcessorConst::Method_getWeightingFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_getWeightingFunction)] = "getWeightingFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "defineSummarizerFunction")] = QueryProcessorConst::Method_defineSummarizerFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_defineSummarizerFunction)] = "defineSummarizerFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getSummarizerFunction")] = QueryProcessorConst::Method_getSummarizerFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_getSummarizerFunction)] = "getSummarizerFunction";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getFunctionList")] = QueryProcessorConst::Method_getFunctionList;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_getFunctionList)] = "getFunctionList";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "defineScalarFunctionParser")] = QueryProcessorConst::Method_defineScalarFunctionParser;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_defineScalarFunctionParser)] = "defineScalarFunctionParser";
	m_methodnamemap[ MethodNameRef( ClassId_QueryProcessor, "getScalarFunctionParser")] = QueryProcessorConst::Method_getScalarFunctionParser;
	m_methodnameinvmap[ MethodIdRef( ClassId_QueryProcessor, QueryProcessorConst::Method_getScalarFunctionParser)] = "getScalarFunctionParser";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "Destructor")] = ScalarFunctionInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ScalarFunctionInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "setVariableValue")] = ScalarFunctionInstanceConst::Method_setVariableValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ScalarFunctionInstanceConst::Method_setVariableValue)] = "setVariableValue";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "call")] = ScalarFunctionInstanceConst::Method_call;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ScalarFunctionInstanceConst::Method_call)] = "call";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionInstance, "tostring")] = ScalarFunctionInstanceConst::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionInstance, ScalarFunctionInstanceConst::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "Destructor")] = ScalarFunctionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ScalarFunctionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "getVariables")] = ScalarFunctionConst::Method_getVariables;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ScalarFunctionConst::Method_getVariables)] = "getVariables";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "getNofArguments")] = ScalarFunctionConst::Method_getNofArguments;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ScalarFunctionConst::Method_getNofArguments)] = "getNofArguments";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "setDefaultVariableValue")] = ScalarFunctionConst::Method_setDefaultVariableValue;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ScalarFunctionConst::Method_setDefaultVariableValue)] = "setDefaultVariableValue";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "createInstance")] = ScalarFunctionConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ScalarFunctionConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunction, "tostring")] = ScalarFunctionConst::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunction, ScalarFunctionConst::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionParser, "Destructor")] = ScalarFunctionParserConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionParser, ScalarFunctionParserConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ScalarFunctionParser, "createFunction")] = ScalarFunctionParserConst::Method_createFunction;
	m_methodnameinvmap[ MethodIdRef( ClassId_ScalarFunctionParser, ScalarFunctionParserConst::Method_createFunction)] = "createFunction";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterContext, "Destructor")] = SegmenterContextConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterContext, SegmenterContextConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterContext, "putInput")] = SegmenterContextConst::Method_putInput;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterContext, SegmenterContextConst::Method_putInput)] = "putInput";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterContext, "getNext")] = SegmenterContextConst::Method_getNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterContext, SegmenterContextConst::Method_getNext)] = "getNext";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "Destructor")] = SegmenterInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, SegmenterInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "defineSelectorExpression")] = SegmenterInstanceConst::Method_defineSelectorExpression;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, SegmenterInstanceConst::Method_defineSelectorExpression)] = "defineSelectorExpression";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "defineSubSection")] = SegmenterInstanceConst::Method_defineSubSection;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, SegmenterInstanceConst::Method_defineSubSection)] = "defineSubSection";
	m_methodnamemap[ MethodNameRef( ClassId_SegmenterInstance, "createContext")] = SegmenterInstanceConst::Method_createContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_SegmenterInstance, SegmenterInstanceConst::Method_createContext)] = "createContext";
	m_methodnamemap[ MethodNameRef( ClassId_Segmenter, "Destructor")] = SegmenterConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Segmenter, SegmenterConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Segmenter, "mimeType")] = SegmenterConst::Method_mimeType;
	m_methodnameinvmap[ MethodIdRef( ClassId_Segmenter, SegmenterConst::Method_mimeType)] = "mimeType";
	m_methodnamemap[ MethodNameRef( ClassId_Segmenter, "createInstance")] = SegmenterConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_Segmenter, SegmenterConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "Destructor")] = StatisticsBuilderConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, StatisticsBuilderConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "setNofDocumentsInsertedChange")] = StatisticsBuilderConst::Method_setNofDocumentsInsertedChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, StatisticsBuilderConst::Method_setNofDocumentsInsertedChange)] = "setNofDocumentsInsertedChange";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "addDfChange")] = StatisticsBuilderConst::Method_addDfChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, StatisticsBuilderConst::Method_addDfChange)] = "addDfChange";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "start")] = StatisticsBuilderConst::Method_start;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, StatisticsBuilderConst::Method_start)] = "start";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "rollback")] = StatisticsBuilderConst::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, StatisticsBuilderConst::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsBuilder, "fetchMessage")] = StatisticsBuilderConst::Method_fetchMessage;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsBuilder, StatisticsBuilderConst::Method_fetchMessage)] = "fetchMessage";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsIterator, "Destructor")] = StatisticsIteratorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsIterator, StatisticsIteratorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsIterator, "getNext")] = StatisticsIteratorConst::Method_getNext;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsIterator, StatisticsIteratorConst::Method_getNext)] = "getNext";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsProcessor, "Destructor")] = StatisticsProcessorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsProcessor, StatisticsProcessorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsProcessor, "createViewer")] = StatisticsProcessorConst::Method_createViewer;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsProcessor, StatisticsProcessorConst::Method_createViewer)] = "createViewer";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsProcessor, "createBuilder")] = StatisticsProcessorConst::Method_createBuilder;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsProcessor, StatisticsProcessorConst::Method_createBuilder)] = "createBuilder";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsViewer, "Destructor")] = StatisticsViewerConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsViewer, StatisticsViewerConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsViewer, "nofDocumentsInsertedChange")] = StatisticsViewerConst::Method_nofDocumentsInsertedChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsViewer, StatisticsViewerConst::Method_nofDocumentsInsertedChange)] = "nofDocumentsInsertedChange";
	m_methodnamemap[ MethodNameRef( ClassId_StatisticsViewer, "nextDfChange")] = StatisticsViewerConst::Method_nextDfChange;
	m_methodnameinvmap[ MethodIdRef( ClassId_StatisticsViewer, StatisticsViewerConst::Method_nextDfChange)] = "nextDfChange";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "Destructor")] = StorageAlterMetaDataTableConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "addElement")] = StorageAlterMetaDataTableConst::Method_addElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_addElement)] = "addElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "alterElement")] = StorageAlterMetaDataTableConst::Method_alterElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_alterElement)] = "alterElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "renameElement")] = StorageAlterMetaDataTableConst::Method_renameElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_renameElement)] = "renameElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "deleteElement")] = StorageAlterMetaDataTableConst::Method_deleteElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_deleteElement)] = "deleteElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "clearElement")] = StorageAlterMetaDataTableConst::Method_clearElement;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_clearElement)] = "clearElement";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "commit")] = StorageAlterMetaDataTableConst::Method_commit;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_commit)] = "commit";
	m_methodnamemap[ MethodNameRef( ClassId_StorageAlterMetaDataTable, "rollback")] = StorageAlterMetaDataTableConst::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageAlterMetaDataTable, StorageAlterMetaDataTableConst::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "Destructor")] = StorageClientConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTermPostingIterator")] = StorageClientConst::Method_createTermPostingIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createTermPostingIterator)] = "createTermPostingIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createBrowsePostingIterator")] = StorageClientConst::Method_createBrowsePostingIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createBrowsePostingIterator)] = "createBrowsePostingIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createForwardIterator")] = StorageClientConst::Method_createForwardIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createForwardIterator)] = "createForwardIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDocumentTermIterator")] = StorageClientConst::Method_createDocumentTermIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createDocumentTermIterator)] = "createDocumentTermIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createInvAclIterator")] = StorageClientConst::Method_createInvAclIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createInvAclIterator)] = "createInvAclIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "nofDocumentsInserted")] = StorageClientConst::Method_nofDocumentsInserted;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_nofDocumentsInserted)] = "nofDocumentsInserted";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "documentFrequency")] = StorageClientConst::Method_documentFrequency;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_documentFrequency)] = "documentFrequency";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "maxDocumentNumber")] = StorageClientConst::Method_maxDocumentNumber;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_maxDocumentNumber)] = "maxDocumentNumber";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "documentNumber")] = StorageClientConst::Method_documentNumber;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_documentNumber)] = "documentNumber";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTermTypeIterator")] = StorageClientConst::Method_createTermTypeIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createTermTypeIterator)] = "createTermTypeIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTermValueIterator")] = StorageClientConst::Method_createTermValueIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createTermValueIterator)] = "createTermValueIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDocIdIterator")] = StorageClientConst::Method_createDocIdIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createDocIdIterator)] = "createDocIdIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createUserNameIterator")] = StorageClientConst::Method_createUserNameIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createUserNameIterator)] = "createUserNameIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "documentStatistics")] = StorageClientConst::Method_documentStatistics;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_documentStatistics)] = "documentStatistics";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createMetaDataReader")] = StorageClientConst::Method_createMetaDataReader;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createMetaDataReader)] = "createMetaDataReader";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createMetaDataRestriction")] = StorageClientConst::Method_createMetaDataRestriction;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createMetaDataRestriction)] = "createMetaDataRestriction";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createAttributeReader")] = StorageClientConst::Method_createAttributeReader;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createAttributeReader)] = "createAttributeReader";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createTransaction")] = StorageClientConst::Method_createTransaction;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createTransaction)] = "createTransaction";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createInitStatisticsIterator")] = StorageClientConst::Method_createInitStatisticsIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createInitStatisticsIterator)] = "createInitStatisticsIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createUpdateStatisticsIterator")] = StorageClientConst::Method_createUpdateStatisticsIterator;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createUpdateStatisticsIterator)] = "createUpdateStatisticsIterator";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "getStatisticsProcessor")] = StorageClientConst::Method_getStatisticsProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_getStatisticsProcessor)] = "getStatisticsProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDocumentChecker")] = StorageClientConst::Method_createDocumentChecker;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createDocumentChecker)] = "createDocumentChecker";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "checkStorage")] = StorageClientConst::Method_checkStorage;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_checkStorage)] = "checkStorage";
	m_methodnamemap[ MethodNameRef( ClassId_StorageClient, "createDump")] = StorageClientConst::Method_createDump;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageClient, StorageClientConst::Method_createDump)] = "createDump";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "Destructor")] = StorageDocumentConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, StorageDocumentConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "addSearchIndexTerm")] = StorageDocumentConst::Method_addSearchIndexTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, StorageDocumentConst::Method_addSearchIndexTerm)] = "addSearchIndexTerm";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "addForwardIndexTerm")] = StorageDocumentConst::Method_addForwardIndexTerm;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, StorageDocumentConst::Method_addForwardIndexTerm)] = "addForwardIndexTerm";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "setMetaData")] = StorageDocumentConst::Method_setMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, StorageDocumentConst::Method_setMetaData)] = "setMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "setAttribute")] = StorageDocumentConst::Method_setAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, StorageDocumentConst::Method_setAttribute)] = "setAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "setUserAccessRight")] = StorageDocumentConst::Method_setUserAccessRight;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, StorageDocumentConst::Method_setUserAccessRight)] = "setUserAccessRight";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocument, "done")] = StorageDocumentConst::Method_done;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocument, StorageDocumentConst::Method_done)] = "done";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "Destructor")] = StorageDocumentUpdateConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "setMetaData")] = StorageDocumentUpdateConst::Method_setMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_setMetaData)] = "setMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "setAttribute")] = StorageDocumentUpdateConst::Method_setAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_setAttribute)] = "setAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "clearAttribute")] = StorageDocumentUpdateConst::Method_clearAttribute;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_clearAttribute)] = "clearAttribute";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "setUserAccessRight")] = StorageDocumentUpdateConst::Method_setUserAccessRight;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_setUserAccessRight)] = "setUserAccessRight";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "clearUserAccessRight")] = StorageDocumentUpdateConst::Method_clearUserAccessRight;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_clearUserAccessRight)] = "clearUserAccessRight";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "clearUserAccessRights")] = StorageDocumentUpdateConst::Method_clearUserAccessRights;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_clearUserAccessRights)] = "clearUserAccessRights";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDocumentUpdate, "done")] = StorageDocumentUpdateConst::Method_done;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDocumentUpdate, StorageDocumentUpdateConst::Method_done)] = "done";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDump, "Destructor")] = StorageDumpConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDump, StorageDumpConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageDump, "nextChunk")] = StorageDumpConst::Method_nextChunk;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageDump, StorageDumpConst::Method_nextChunk)] = "nextChunk";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "Destructor")] = StorageConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, StorageConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "createClient")] = StorageConst::Method_createClient;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, StorageConst::Method_createClient)] = "createClient";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "createStorage")] = StorageConst::Method_createStorage;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, StorageConst::Method_createStorage)] = "createStorage";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "createAlterMetaDataTable")] = StorageConst::Method_createAlterMetaDataTable;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, StorageConst::Method_createAlterMetaDataTable)] = "createAlterMetaDataTable";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "getConfigDescription")] = StorageConst::Method_getConfigDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, StorageConst::Method_getConfigDescription)] = "getConfigDescription";
	m_methodnamemap[ MethodNameRef( ClassId_Storage, "getConfigParameters")] = StorageConst::Method_getConfigParameters;
	m_methodnameinvmap[ MethodIdRef( ClassId_Storage, StorageConst::Method_getConfigParameters)] = "getConfigParameters";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "Destructor")] = StorageObjectBuilderConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getStorage")] = StorageObjectBuilderConst::Method_getStorage;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_getStorage)] = "getStorage";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getDatabase")] = StorageObjectBuilderConst::Method_getDatabase;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_getDatabase)] = "getDatabase";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getQueryProcessor")] = StorageObjectBuilderConst::Method_getQueryProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_getQueryProcessor)] = "getQueryProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "getStatisticsProcessor")] = StorageObjectBuilderConst::Method_getStatisticsProcessor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_getStatisticsProcessor)] = "getStatisticsProcessor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "createStorageClient")] = StorageObjectBuilderConst::Method_createStorageClient;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_createStorageClient)] = "createStorageClient";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "createAlterMetaDataTable")] = StorageObjectBuilderConst::Method_createAlterMetaDataTable;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_createAlterMetaDataTable)] = "createAlterMetaDataTable";
	m_methodnamemap[ MethodNameRef( ClassId_StorageObjectBuilder, "createQueryEval")] = StorageObjectBuilderConst::Method_createQueryEval;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageObjectBuilder, StorageObjectBuilderConst::Method_createQueryEval)] = "createQueryEval";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "Destructor")] = StorageTransactionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "createDocument")] = StorageTransactionConst::Method_createDocument;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_createDocument)] = "createDocument";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "createDocumentUpdate")] = StorageTransactionConst::Method_createDocumentUpdate;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_createDocumentUpdate)] = "createDocumentUpdate";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "deleteDocument")] = StorageTransactionConst::Method_deleteDocument;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_deleteDocument)] = "deleteDocument";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "deleteUserAccessRights")] = StorageTransactionConst::Method_deleteUserAccessRights;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_deleteUserAccessRights)] = "deleteUserAccessRights";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "updateMetaData")] = StorageTransactionConst::Method_updateMetaData;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_updateMetaData)] = "updateMetaData";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "commit")] = StorageTransactionConst::Method_commit;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_commit)] = "commit";
	m_methodnamemap[ MethodNameRef( ClassId_StorageTransaction, "rollback")] = StorageTransactionConst::Method_rollback;
	m_methodnameinvmap[ MethodIdRef( ClassId_StorageTransaction, StorageTransactionConst::Method_rollback)] = "rollback";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionContext, "Destructor")] = SummarizerFunctionContextConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionContext, SummarizerFunctionContextConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionContext, "addSummarizationFeature")] = SummarizerFunctionContextConst::Method_addSummarizationFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionContext, SummarizerFunctionContextConst::Method_addSummarizationFeature)] = "addSummarizationFeature";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionContext, "getSummary")] = SummarizerFunctionContextConst::Method_getSummary;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionContext, SummarizerFunctionContextConst::Method_getSummary)] = "getSummary";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "Destructor")] = SummarizerFunctionInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, SummarizerFunctionInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "addStringParameter")] = SummarizerFunctionInstanceConst::Method_addStringParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, SummarizerFunctionInstanceConst::Method_addStringParameter)] = "addStringParameter";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "addNumericParameter")] = SummarizerFunctionInstanceConst::Method_addNumericParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, SummarizerFunctionInstanceConst::Method_addNumericParameter)] = "addNumericParameter";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "createFunctionContext")] = SummarizerFunctionInstanceConst::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, SummarizerFunctionInstanceConst::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunctionInstance, "tostring")] = SummarizerFunctionInstanceConst::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunctionInstance, SummarizerFunctionInstanceConst::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunction, "Destructor")] = SummarizerFunctionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunction, SummarizerFunctionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunction, "createInstance")] = SummarizerFunctionConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunction, SummarizerFunctionConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_SummarizerFunction, "getDescription")] = SummarizerFunctionConst::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_SummarizerFunction, SummarizerFunctionConst::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "Destructor")] = TextProcessorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "addResourcePath")] = TextProcessorConst::Method_addResourcePath;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_addResourcePath)] = "addResourcePath";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getResourcePath")] = TextProcessorConst::Method_getResourcePath;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_getResourcePath)] = "getResourcePath";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getTokenizer")] = TextProcessorConst::Method_getTokenizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_getTokenizer)] = "getTokenizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getNormalizer")] = TextProcessorConst::Method_getNormalizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_getNormalizer)] = "getNormalizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getAggregator")] = TextProcessorConst::Method_getAggregator;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_getAggregator)] = "getAggregator";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "detectDocumentClass")] = TextProcessorConst::Method_detectDocumentClass;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_detectDocumentClass)] = "detectDocumentClass";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineDocumentClassDetector")] = TextProcessorConst::Method_defineDocumentClassDetector;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_defineDocumentClassDetector)] = "defineDocumentClassDetector";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineTokenizer")] = TextProcessorConst::Method_defineTokenizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_defineTokenizer)] = "defineTokenizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineNormalizer")] = TextProcessorConst::Method_defineNormalizer;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_defineNormalizer)] = "defineNormalizer";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "defineAggregator")] = TextProcessorConst::Method_defineAggregator;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_defineAggregator)] = "defineAggregator";
	m_methodnamemap[ MethodNameRef( ClassId_TextProcessor, "getFunctionList")] = TextProcessorConst::Method_getFunctionList;
	m_methodnameinvmap[ MethodIdRef( ClassId_TextProcessor, TextProcessorConst::Method_getFunctionList)] = "getFunctionList";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionContext, "Destructor")] = TokenizerFunctionContextConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionContext, TokenizerFunctionContextConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionContext, "tokenize")] = TokenizerFunctionContextConst::Method_tokenize;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionContext, TokenizerFunctionContextConst::Method_tokenize)] = "tokenize";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionInstance, "Destructor")] = TokenizerFunctionInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionInstance, TokenizerFunctionInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionInstance, "concatBeforeTokenize")] = TokenizerFunctionInstanceConst::Method_concatBeforeTokenize;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionInstance, TokenizerFunctionInstanceConst::Method_concatBeforeTokenize)] = "concatBeforeTokenize";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunctionInstance, "createFunctionContext")] = TokenizerFunctionInstanceConst::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunctionInstance, TokenizerFunctionInstanceConst::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunction, "Destructor")] = TokenizerFunctionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunction, TokenizerFunctionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunction, "createInstance")] = TokenizerFunctionConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunction, TokenizerFunctionConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_TokenizerFunction, "getDescription")] = TokenizerFunctionConst::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_TokenizerFunction, TokenizerFunctionConst::Method_getDescription)] = "getDescription";
	m_methodnamemap[ MethodNameRef( ClassId_ValueIterator, "Destructor")] = ValueIteratorConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_ValueIterator, ValueIteratorConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_ValueIterator, "skip")] = ValueIteratorConst::Method_skip;
	m_methodnameinvmap[ MethodIdRef( ClassId_ValueIterator, ValueIteratorConst::Method_skip)] = "skip";
	m_methodnamemap[ MethodNameRef( ClassId_ValueIterator, "fetchValues")] = ValueIteratorConst::Method_fetchValues;
	m_methodnameinvmap[ MethodIdRef( ClassId_ValueIterator, ValueIteratorConst::Method_fetchValues)] = "fetchValues";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionContext, "Destructor")] = WeightingFunctionContextConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionContext, WeightingFunctionContextConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionContext, "addWeightingFeature")] = WeightingFunctionContextConst::Method_addWeightingFeature;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionContext, WeightingFunctionContextConst::Method_addWeightingFeature)] = "addWeightingFeature";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionContext, "call")] = WeightingFunctionContextConst::Method_call;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionContext, WeightingFunctionContextConst::Method_call)] = "call";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "Destructor")] = WeightingFunctionInstanceConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, WeightingFunctionInstanceConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "addStringParameter")] = WeightingFunctionInstanceConst::Method_addStringParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, WeightingFunctionInstanceConst::Method_addStringParameter)] = "addStringParameter";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "addNumericParameter")] = WeightingFunctionInstanceConst::Method_addNumericParameter;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, WeightingFunctionInstanceConst::Method_addNumericParameter)] = "addNumericParameter";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "createFunctionContext")] = WeightingFunctionInstanceConst::Method_createFunctionContext;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, WeightingFunctionInstanceConst::Method_createFunctionContext)] = "createFunctionContext";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunctionInstance, "tostring")] = WeightingFunctionInstanceConst::Method_tostring;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunctionInstance, WeightingFunctionInstanceConst::Method_tostring)] = "tostring";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunction, "Destructor")] = WeightingFunctionConst::Method_Destructor;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunction, WeightingFunctionConst::Method_Destructor)] = "Destructor";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunction, "createInstance")] = WeightingFunctionConst::Method_createInstance;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunction, WeightingFunctionConst::Method_createInstance)] = "createInstance";
	m_methodnamemap[ MethodNameRef( ClassId_WeightingFunction, "getDescription")] = WeightingFunctionConst::Method_getDescription;
	m_methodnameinvmap[ MethodIdRef( ClassId_WeightingFunction, WeightingFunctionConst::Method_getDescription)] = "getDescription";
}
